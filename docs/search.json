[
  {
    "objectID": "day-09-10.html",
    "href": "day-09-10.html",
    "title": "Daily Exercise 09-10",
    "section": "",
    "text": "Using the airquality from R datasets\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(visdat)\ndata(\"airquality\")\n\n\nUse the help (?) function to learn more about the dataset\n\n\n?airquality\n\n\nUse vis_dat to check out the data. Does it need cleaning?\n\nYes, the data needs cleaning because there are NA values in Ozone and Solar.R.\n\nvis_dat(airquality)\n\n\n\n\n\n\n\n# cleaning ozone and solar data\nairquality &lt;- airquality %&gt;%\n  drop_na()\nvis_dat(airquality)\n\n\n\n\n\n\n\n\n\nFit a linear model to the cleaned data to predict Ozone from one of the possible predictors of your choosing. Why did you chose that variable?\n\nTemperature is a possible predictor for ozone because it has the strongest correlation with ozone at 0.29.\n\ncor(airquality[, c(\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\")], use=\"complete.obs\")\n\n             Ozone    Solar.R       Wind       Temp\nOzone    1.0000000  0.3483417 -0.6124966  0.6985414\nSolar.R  0.3483417  1.0000000 -0.1271835  0.2940876\nWind    -0.6124966 -0.1271835  1.0000000 -0.4971897\nTemp     0.6985414  0.2940876 -0.4971897  1.0000000\n\nlm_model &lt;- lm(Ozone ~ Temp, data = airquality)\n\n\nUsing summary(), Does this seem like a valid model?\n\nYes, the linear model of ozone and temperature seems like a valid model.\n\nsummary(lm_model) \n\n\nCall:\nlm(formula = Ozone ~ Temp, data = airquality)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-40.922 -17.459  -0.874  10.444 118.078 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -147.6461    18.7553  -7.872 2.76e-12 ***\nTemp           2.4391     0.2393  10.192  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 23.92 on 109 degrees of freedom\nMultiple R-squared:  0.488, Adjusted R-squared:  0.4833 \nF-statistic: 103.9 on 1 and 109 DF,  p-value: &lt; 2.2e-16\n\n\n\nExplain the R2 found in a sentence.\n\n48.8% of the variation in ozone levels can be explained by temperature, while the remaining 51.2% is due to other factors not included in the model.\n\nUse broom::augment to predict the Ozone of the cleaned data\n\n\nlibrary(broom)\npredicted_data &lt;- augment(lm_model, data=airquality)\nhead(predicted_data)\n\n# A tibble: 6 × 12\n  Ozone Solar.R  Wind  Temp Month   Day .fitted .resid   .hat .sigma  .cooksd\n  &lt;int&gt;   &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1    41     190   7.4    67     5     1   15.8   25.2  0.0207   23.9 0.0120  \n2    36     118   8      72     5     2   28.0    8.03 0.0124   24.0 0.000714\n3    12     149  12.6    74     5     3   32.8  -20.8  0.0104   23.9 0.00405 \n4    18     313  11.5    62     5     4    3.58  14.4  0.0340   24.0 0.00662 \n5    23     299   8.6    65     5     7   10.9   12.1  0.0254   24.0 0.00342 \n6    19      99  13.8    59     5     8   -3.74  22.7  0.0444   23.9 0.0219  \n# ℹ 1 more variable: .std.resid &lt;dbl&gt;\n\n\n\nUse ggplot to plot the actual vs predicted Ozone\n\n\nAdd a red line to show where the actual and predicted values are equal This can be done by plotting a 1:1 line (e.g. intercept 0, slope 1) with geom_abline(intercept = 0, slope = 1, color = “red”)\nAdd a subtitle to the plot showing the correlation between the actual and predicted values are equal This can be done by plotting a 1:1 line (e.g. intercept 0, slope 1) with paste(“Correlation:”, round(cor(a\\(Ozone, a\\).fitted),2)) assuming your augmented data object is called ‘a’\n\n\nggplot(predicted_data, aes(x = Ozone, y = .fitted)) +\n  geom_point(alpha = 0.7, color = \"blue\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") + \n  labs(title = \"Actual vs Predicted Ozone Levels\",\n       x = \"Actual Ozone\",\n       y = \"Predicted Ozone\",\n       subtitle = paste(\"Correlation:\", round(cor(predicted_data$Ozone, predicted_data$.fitted), 2))) +\n  theme_minimal()"
  }
]